:Class NGC
    (⎕IO ⎕ML)←1
    :field public project_name
    :field public project_dir
	:field public dotnet_version
    :field public packages←⍬
    :field private quiet←0
    
    :Section Dev
        
        Log ← {quiet:_←⍵ ⋄ ⎕←⍵}
        
    :EndSection
    
    :Section System
        
 ∇ dnv←GetDotNetVersion;ver
⍝ More detailed version in [DYALOG]/SALT/spice/Spice.dyalog (used in ]TOOLS.Version etc.)
⍝ 0/1/2: 0=nothing, 1=.NET Framework, 2=.NET Core / .NET 5+
⍝ TODO 0 case
     ⎕USING←'' 'System'
	 :trap 0
       ver←⍕System.Environment.Version
	 :else
	   'No .NET available. Install a .NET SDK or check [NETCORE] environment variable.'⎕SIGNAL 11
	 :endtrap

	 :if '4.0.30319.42000'≡ver
       dnv←⊃,/2↑'.'(≠⊆⊢)⊃⌽' '(≠⊆⊢)Runtime.InteropServices.RuntimeInformation.FrameworkDescription
     :elseif '4.0.30319.'≡10↑ver:
	   dnv←ver
	 :else
       dnv←⊃(⊣,'.',⊢)/⍕¨System.Environment.Version.(Major Minor)
	 :endif  
	 dnv,⍨←'net'
 ∇

        
    :EndSection
    
    :Section DotNetProject

∇ make1 path;dnv
:access public
:implements constructor
⍝ Not a huge fan of this "several Make functions for different numbers of arguments" thing...
project_dir←path   ⍝ 
project_name←⊃⌽⎕nparts path
dotnet_version←GetDotNetVersion
⎕←⎕CMD 'dotnet new classlib -f ',dotnet_version,' -o ',path
∇

∇ AddPackages pkgs;str;AP
:access public   ⍝ this is also a pain - can we do something that isn't a class?
    pkgs←,⊆pkgs
    str←(⊣,' --version ',⊢)/pkgs
    AP←{⎕CMD'dotnet add ',⍺,' package ',⍵}
    project_dir∘AP¨str
    packages,←pkgs
∇

∇ using←GetUsing pkg
:access public
  using←Using pkg
∇

 Using←{
⍝ ⍵: [packages] (empty: all)
⍝ ⍺: dotnetversion (default: running)
    dnv←dotnet_version
    mat←0(⎕json⎕opt'Format' 'M')⊃⎕nget project_dir,'/obj/project.assets.json'
    (d n v t)←↓⍉mat ⋄ _←2{p[⍵]←⍺[⍺⍸⍵]}⌿⊢∘⊂⌸d⊣p←⍳≢d
    tgt←p=1+⍸'targets' 'net6.0'⍷n ⋄ pid←⍸p=tgt
    name←,⊆⍵ ⋄ pn←,∘'/'¨name
    pkg←⍸tgt(∨⌿∧⍤1)pn∘.(⊃⍷)n
    isdep←'dependencies'∘≡¨n
    GetDeps←{⍵∪⍸tgt∧n∊(⊣,'/',⊢)/⍉↑(n v)/¨⍨⊂p∊⍸isdep∧p∊⍵}
    use←GetDeps⍣≡pkg
    dll←'/',¨n⌿⍨p∊⍸('runtime'∘≡¨n)∧p∊use
    ⎕USING←'System'
    up←Environment.(GetFolderPath SpecialFolder.UserProfile)
    cache←up,'/.nuget/packages/'
    name,¨',',¨cache∘,¨n[pkg],¨dll
}

        
    :endsection
    
:endclass
